#!/bin/bash

# ============================================================================
# Git Pre-Commit Hook for Automatic File Updates and Code Quality Checks
# ============================================================================
# This script performs the following tasks before every commit:
#
# 1. Updates README.md with a last updated timestamp
# 2. Updates .gitignore with any new files that should be ignored
# 3. Updates LICENSE with the current copyright year if needed
# 4. Updates the Knowledge Graph
# 5. Checks for orphaned or outdated files
# 6. Runs code quality checks using pre-commit hooks
#
# The script then stages these files so they're included in the commit.
# ============================================================================

echo "Running pre-commit file update and code quality hook..."

# Function to check if a file exists and is tracked by git
file_is_tracked() {
    [ -f "$1" ] && git ls-files --error-unmatch "$1" > /dev/null 2>&1
}

# ============================================================================
# 1. Update README.md with timestamp
# ============================================================================
if file_is_tracked "README.md"; then
    echo "Updating README.md timestamp..."
    
    # Check if README already has a timestamp line
    if grep -q "Last updated:" README.md; then
        # Update existing timestamp
        sed -i "s/Last updated:.*$/Last updated: $(date '+%Y-%m-%d %H:%M:%S')/" README.md
    else
        # Add timestamp at the end of the file
        echo -e "\n## Maintenance\n\nLast updated: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
    fi
    
    # Stage README.md if it was modified
    if git diff --quiet README.md; then
        echo "No changes to README.md"
    else
        git add README.md
        echo "README.md updated and staged"
    fi
fi

# ============================================================================
# 2. Update .gitignore with new files to ignore
# ============================================================================
if file_is_tracked ".gitignore"; then
    echo "Checking for new files to ignore..."
    
    # List of common files/directories that should be ignored
    COMMON_IGNORES=(
        # Temporary files
        "*.tmp"
        "*.temp"
        "*.bak"
        
        # Local configuration
        ".env.*.local"
        
        # Runtime data
        "pids"
        "*.pid"
        "*.seed"
        "*.pid.lock"
        
        # Coverage reports
        "coverage"
        ".nyc_output"
        
        # MCP-BASE-STACK specific
        "mcp_*.log.*"
        "*.health-report.txt"
        
        # Python specific
        "__pycache__/"
        "*.py[cod]"
        "*$py.class"
        ".pytest_cache/"
        ".coverage"
        "htmlcov/"
        ".mypy_cache/"
    )
    
    # Check if each common ignore is already in .gitignore
    GITIGNORE_MODIFIED=false
    for ignore in "${COMMON_IGNORES[@]}"; do
        if ! grep -q "^$ignore$" .gitignore; then
            echo "$ignore" >> .gitignore
            GITIGNORE_MODIFIED=true
        fi
    done
    
    # Stage .gitignore if it was modified
    if [ "$GITIGNORE_MODIFIED" = true ]; then
        git add .gitignore
        echo ".gitignore updated and staged"
    else
        echo "No changes to .gitignore"
    fi
fi

# ============================================================================
# 3. Update LICENSE copyright year
# ============================================================================
if file_is_tracked "LICENSE"; then
    echo "Checking LICENSE copyright year..."
    
    # Get current year
    CURRENT_YEAR=$(date +"%Y")
    
    # Check if LICENSE contains the current year
    if ! grep -q "Copyright (c) $CURRENT_YEAR" LICENSE; then
        # Update the copyright year
        sed -i "s/Copyright (c) [0-9]\{4\}/Copyright (c) $CURRENT_YEAR/" LICENSE
        
        # Stage LICENSE if it was modified
        if git diff --quiet LICENSE; then
            echo "No changes to LICENSE"
        else
            git add LICENSE
            echo "LICENSE updated and staged"
        fi
    else
        echo "LICENSE copyright year is current"
    fi
fi

# ============================================================================
# 4. Update Knowledge Graph
# ============================================================================
if [ -f "core/kg/scripts/update_knowledge_graph.py" ]; then
    echo "Updating Knowledge Graph..."
    
    # Run the update script
    if python3 core/kg/scripts/update_knowledge_graph.py; then
        echo "Knowledge Graph updated successfully"
    else
        echo "Warning: Knowledge Graph update failed, but continuing with commit"
    fi
else
    echo "Knowledge Graph update script not found, skipping"
fi

# ============================================================================
# 5. Check for orphaned or outdated files
# ============================================================================
if [ -f "cleanup_files.py" ]; then
    echo "Running file cleanup check in dry-run mode..."
    
    # Run the cleanup script in dry-run mode
    if python3 cleanup_files.py --project-dir . --manifest specification-manifest.json --dry-run --output cleanup-report.json; then
        echo "File cleanup check completed. See cleanup-report.json for details."
        
        # Check if there are files to clean up
        CLEANUP_COUNT=$(grep -o '"total_files_to_cleanup": [0-9]*' cleanup-report.json | grep -o '[0-9]*')
        if [ "$CLEANUP_COUNT" -gt 0 ]; then
            echo "Warning: Found $CLEANUP_COUNT files that could be cleaned up."
            echo "Run 'python3 cleanup_files.py --project-dir . --manifest specification-manifest.json --interactive' to review and clean up these files."
        fi
    else
        echo "Warning: File cleanup check failed"
    fi
else
    echo "File cleanup script not found, skipping"
fi

# ============================================================================
# 6. Run Code Quality Checks
# ============================================================================
echo "Running code quality checks..."

# Check if pre-commit is installed
if command -v pre-commit &> /dev/null; then
    # Run pre-commit hooks
    if pre-commit run --files $(git diff --cached --name-only); then
        echo "Code quality checks passed"
    else
        echo "Code quality checks failed"
        echo "Please fix the issues or use --no-verify to bypass (not recommended)"
        exit 1
    fi
else
    echo "Warning: pre-commit is not installed, skipping code quality checks"
    echo "Install with: pip install pre-commit && pre-commit install"
    
    # Run basic code quality checks using our custom script if available
    if [ -f "check_code_quality.sh" ]; then
        echo "Running basic code quality checks..."
        if ./check_code_quality.sh; then
            echo "Basic code quality checks passed"
        else
            echo "Basic code quality checks failed"
            echo "Please fix the issues or use --no-verify to bypass (not recommended)"
            echo "You can run ./fix_code_quality.sh to automatically fix some issues"
            exit 1
        fi
    fi
fi

echo "Pre-commit file update and code quality hook completed"
exit 0