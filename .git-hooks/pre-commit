#!/bin/bash

# ============================================================================
# Pre-commit Hook for Code Quality Enforcement
# ============================================================================
# This hook runs before each commit to ensure code quality standards are met.
# It performs the following checks:
#
# 1. Runs pre-commit hooks defined in .pre-commit-config.yaml
# 2. Runs the quality enforcer to check code quality
# 3. Updates the knowledge graph with quality metrics
# ============================================================================

set -e

# Define colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print section headers
print_header() {
    echo -e "\n${YELLOW}========================================"
    echo -e "  $1"
    echo -e "========================================${NC}\n"
}

# Get the list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}No files staged for commit. Skipping quality checks.${NC}"
    exit 0
fi

# Run pre-commit hooks
print_header "Running Pre-commit Hooks"
pre-commit run --files $STAGED_FILES

# Run quality enforcer on staged files
print_header "Running Quality Enforcer"
python -c "
import sys
from core.quality.enforcer import enforcer

# Get the list of staged files
staged_files = '''$STAGED_FILES'''.split('\n')

# Run quality checks
results = enforcer.run_all_checks(staged_files)

# Filter for issues with severity WARNING or higher
issues = [r for r in results if r.severity.value >= 2]  # WARNING=2, ERROR=3, CRITICAL=4

if issues:
    print(f'\n{len(issues)} quality issues found:')
    for issue in issues:
        severity = issue.severity.name
        color = '\033[1;33m' if severity == 'WARNING' else '\033[0;31m'
        print(f'{color}{severity}\033[0m: {issue.message} in {issue.file_path}:{issue.line_number or 0}')
    
    # Update knowledge graph with quality metrics
    enforcer.update_knowledge_graph(results)
    
    # Exit with error code if there are ERROR or CRITICAL issues
    critical_issues = [r for r in issues if r.severity.value >= 3]  # ERROR=3, CRITICAL=4
    if critical_issues:
        print(f'\n\033[0;31mCommit failed: {len(critical_issues)} critical quality issues found.\033[0m')
        print('Please fix the issues and try again.')
        sys.exit(1)
    else:
        print(f'\n\033[1;33mWarning: {len(issues)} quality issues found, but allowing commit.\033[0m')
        print('Consider fixing these issues in a future commit.')
        sys.exit(0)
else:
    print('\n\033[0;32mNo quality issues found.\033[0m')
    
    # Update knowledge graph with quality metrics
    enforcer.update_knowledge_graph(results)
"

exit_code=$?

if [ $exit_code -ne 0 ]; then
    exit $exit_code
fi

print_header "Pre-commit Checks Passed"
echo -e "${GREEN}All quality checks passed. Proceeding with commit.${NC}"

exit 0