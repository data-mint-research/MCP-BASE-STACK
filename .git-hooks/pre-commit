#!/bin/bash

# ============================================================================
# Git Pre-Commit Hook for Automatic File Updates
# ============================================================================
# This script automatically updates README.md, .gitignore, and LICENSE files
# before every commit without requiring explicit user action.
#
# Updates performed:
# 1. README.md - Adds a last updated timestamp
# 2. .gitignore - Adds any new files that should be ignored
# 3. LICENSE - Updates the copyright year if needed
#
# The script then stages these files so they're included in the commit.
# ============================================================================

echo "Running pre-commit file update hook..."

# Function to check if a file exists and is tracked by git
file_is_tracked() {
    [ -f "$1" ] && git ls-files --error-unmatch "$1" > /dev/null 2>&1
}

# ============================================================================
# 1. Update README.md with timestamp
# ============================================================================
if file_is_tracked "README.md"; then
    echo "Updating README.md timestamp..."
    
    # Check if README already has a timestamp line
    if grep -q "Last updated:" README.md; then
        # Update existing timestamp
        sed -i "s/Last updated:.*$/Last updated: $(date '+%Y-%m-%d %H:%M:%S')/" README.md
    else
        # Add timestamp at the end of the file
        echo -e "\n## Maintenance\n\nLast updated: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
    fi
    
    # Stage README.md if it was modified
    if git diff --quiet README.md; then
        echo "No changes to README.md"
    else
        git add README.md
        echo "README.md updated and staged"
    fi
fi

# ============================================================================
# 2. Update .gitignore with new files to ignore
# ============================================================================
if file_is_tracked ".gitignore"; then
    echo "Checking for new files to ignore..."
    
    # List of common files/directories that should be ignored
    COMMON_IGNORES=(
        # Temporary files
        "*.tmp"
        "*.temp"
        "*.bak"
        
        # Local configuration
        ".env.*.local"
        
        # Runtime data
        "pids"
        "*.pid"
        "*.seed"
        "*.pid.lock"
        
        # Coverage reports
        "coverage"
        ".nyc_output"
        
        # MCP-BASE-STACK specific
        "mcp_*.log.*"
        "*.health-report.txt"
    )
    
    # Check if each common ignore is already in .gitignore
    GITIGNORE_MODIFIED=false
    for ignore in "${COMMON_IGNORES[@]}"; do
        if ! grep -q "^$ignore$" .gitignore; then
            echo "$ignore" >> .gitignore
            GITIGNORE_MODIFIED=true
        fi
    done
    
    # Stage .gitignore if it was modified
    if [ "$GITIGNORE_MODIFIED" = true ]; then
        git add .gitignore
        echo ".gitignore updated and staged"
    else
        echo "No changes to .gitignore"
    fi
fi

# ============================================================================
# 3. Update LICENSE copyright year
# ============================================================================
if file_is_tracked "LICENSE"; then
    echo "Checking LICENSE copyright year..."
    
    # Get current year
    CURRENT_YEAR=$(date +"%Y")
    
    # Check if LICENSE contains the current year
    if ! grep -q "Copyright (c) $CURRENT_YEAR" LICENSE; then
        # Update the copyright year
        sed -i "s/Copyright (c) [0-9]\{4\}/Copyright (c) $CURRENT_YEAR/" LICENSE
        
        # Stage LICENSE if it was modified
        if git diff --quiet LICENSE; then
            echo "No changes to LICENSE"
        else
            git add LICENSE
            echo "LICENSE updated and staged"
        fi
    else
        echo "LICENSE copyright year is current"
    fi
fi

# ============================================================================
# 4. Update Knowledge Graph
# ============================================================================
if [ -f "core/kg/scripts/update_knowledge_graph.py" ]; then
    echo "Updating Knowledge Graph..."
    
    # Run the update script
    if python3 core/kg/scripts/update_knowledge_graph.py; then
        echo "Knowledge Graph updated successfully"
    else
        echo "Warning: Knowledge Graph update failed, but continuing with commit"
    fi
else
    echo "Knowledge Graph update script not found, skipping"
fi

echo "Pre-commit file update hook completed"
exit 0