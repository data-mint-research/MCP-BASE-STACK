name: Code Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for proper analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install markdownlint
        run: npm install -g markdownlint-cli

      - name: Install yamllint
        run: pip install yamllint

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Install shfmt
        run: |
          curl -sS https://webinstall.dev/shfmt | bash
          export PATH="$HOME/.local/bin:$PATH"

      - name: Run pre-commit checks
        run: |
          pip install pre-commit
          pre-commit install
          pre-commit run --all-files

      - name: Run Python linting
        run: |
          flake8 .

      - name: Run Python type checking
        run: |
          mypy .

      - name: Run Python style checks
        run: |
          black --check .
          isort --check .

      - name: Run shellcheck
        run: |
          find . -type f -name "*.sh" -exec shellcheck {} \;

      - name: Run markdownlint
        run: |
          markdownlint "**/*.md" --config .markdownlint.yaml || true

      - name: Run yamllint
        run: |
          yamllint -c .yamllint.yaml .

      - name: Check for dependency vulnerabilities
        run: |
          pip install pip-audit safety
          python scripts/utils/maintenance/audit_dependencies.py --verbose

      - name: Run quality enforcer
        run: |
          python -c "
          from core.quality.enforcer import enforcer
          import json
          import datetime

          # Run all quality checks
          results = enforcer.run_all_checks()

          # Update knowledge graph with quality metrics
          enforcer.update_knowledge_graph(results)

          # Generate report
          issues = [r for r in results if r.severity.value >= 2]  # WARNING=2, ERROR=3, CRITICAL=4

          if issues:
              print(f'\n{len(issues)} quality issues found:')
              for issue in issues:
                  severity = issue.severity.name
                  print(f'{severity}: {issue.message} in {issue.file_path}:{issue.line_number or 0}')
              
              # Create report data
              report_data = {
                  'timestamp': datetime.datetime.now().isoformat(),
                  'issues': [
                      {
                          'severity': issue.severity.name,
                          'message': issue.message,
                          'file_path': issue.file_path,
                          'line_number': issue.line_number,
                          'check_id': issue.check_id
                      }
                      for issue in issues
                  ],
                  'summary': {
                      'total_issues': len(issues),
                      'warnings': len([i for i in issues if i.severity.name == 'WARNING']),
                      'errors': len([i for i in issues if i.severity.name == 'ERROR']),
                      'critical': len([i for i in issues if i.severity.name == 'CRITICAL'])
                  }
              }
              
              # Write report to file
              with open('quality-report.json', 'w') as f:
                  json.dump(report_data, f, indent=2)
              
              # Exit with error code if there are ERROR or CRITICAL issues
              critical_issues = [r for r in issues if r.severity.value >= 3]  # ERROR=3, CRITICAL=4
              if critical_issues:
                  print(f'\nFailed: {len(critical_issues)} critical quality issues found.')
                  exit(1)
          else:
              print('\nNo quality issues found.')
          "

      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.json
          if-no-files-found: ignore
