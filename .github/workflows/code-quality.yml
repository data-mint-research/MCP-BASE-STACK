name: Code Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy pylint
        # Install any project dependencies if there's a requirements.txt
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run Black (formatting check)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Run isort (import sorting check)
      run: |
        isort --check --diff .
      continue-on-error: true

    - name: Run flake8 (linting)
      run: |
        flake8 .
      continue-on-error: true

    - name: Run mypy (type checking)
      run: |
        mypy .
      continue-on-error: true

    - name: Run pylint (comprehensive linting)
      run: |
        pylint $(find . -type f -name "*.py" -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/node_modules/*")
      continue-on-error: true

    - name: Run shellcheck (shell script linting)
      run: |
        shellcheck $(find . -type f -name "*.sh" -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/node_modules/*")
      continue-on-error: true

    - name: Check for failures
      run: |
        # Create a summary of all checks
        echo "# Code Quality Check Results" > code_quality_summary.md
        
        # Check Black results
        if black --check . 2>/dev/null; then
          echo "✅ **Black**: All files are properly formatted" >> code_quality_summary.md
        else
          echo "❌ **Black**: Formatting issues found" >> code_quality_summary.md
          echo "Run \`black .\` locally to fix formatting issues" >> code_quality_summary.md
          black --check --diff . >> code_quality_details.txt
        fi
        
        # Check isort results
        if isort --check . 2>/dev/null; then
          echo "✅ **isort**: All imports are properly sorted" >> code_quality_summary.md
        else
          echo "❌ **isort**: Import sorting issues found" >> code_quality_summary.md
          echo "Run \`isort .\` locally to fix import sorting issues" >> code_quality_summary.md
          isort --check --diff . >> code_quality_details.txt
        fi
        
        # Check flake8 results
        if flake8 . 2>/dev/null; then
          echo "✅ **flake8**: No linting issues found" >> code_quality_summary.md
        else
          echo "❌ **flake8**: Linting issues found" >> code_quality_summary.md
          flake8 . >> code_quality_details.txt
        fi
        
        # Check mypy results
        if mypy . 2>/dev/null; then
          echo "✅ **mypy**: No type checking issues found" >> code_quality_summary.md
        else
          echo "❌ **mypy**: Type checking issues found" >> code_quality_summary.md
          mypy . >> code_quality_details.txt
        fi
        
        # Check pylint results
        PYTHON_FILES=$(find . -type f -name "*.py" -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/node_modules/*")
        if pylint $PYTHON_FILES 2>/dev/null; then
          echo "✅ **pylint**: No linting issues found" >> code_quality_summary.md
        else
          echo "❌ **pylint**: Linting issues found" >> code_quality_summary.md
          pylint $PYTHON_FILES >> code_quality_details.txt
        fi
        
        # Check shellcheck results
        SHELL_FILES=$(find . -type f -name "*.sh" -not -path "*/\.*" -not -path "*/venv/*" -not -path "*/node_modules/*")
        if shellcheck $SHELL_FILES 2>/dev/null; then
          echo "✅ **shellcheck**: No shell script issues found" >> code_quality_summary.md
        else
          echo "❌ **shellcheck**: Shell script issues found" >> code_quality_summary.md
          shellcheck $SHELL_FILES >> code_quality_details.txt
        fi
        
        # Add a note about fixing issues
        echo -e "\n## How to fix issues" >> code_quality_summary.md
        echo "To fix issues locally, run the following commands:" >> code_quality_summary.md
        echo '```bash' >> code_quality_summary.md
        echo "black ." >> code_quality_summary.md
        echo "isort ." >> code_quality_summary.md
        echo "# Then fix remaining issues reported by:" >> code_quality_summary.md
        echo "flake8 ." >> code_quality_summary.md
        echo "mypy ." >> code_quality_summary.md
        echo "pylint \$(find . -type f -name \"*.py\" -not -path \"*/\\.*\" -not -path \"*/venv/*\" -not -path \"*/node_modules/*\")" >> code_quality_summary.md
        echo "shellcheck \$(find . -type f -name \"*.sh\" -not -path \"*/\\.*\" -not -path \"*/venv/*\" -not -path \"*/node_modules/*\")" >> code_quality_summary.md
        echo '```' >> code_quality_summary.md
        
        # Check if any failures occurred
        if [ -f code_quality_details.txt ]; then
          echo -e "\n## Detailed Issues" >> code_quality_summary.md
          echo '```' >> code_quality_summary.md
          cat code_quality_details.txt >> code_quality_summary.md
          echo '```' >> code_quality_summary.md
          exit 1
        fi

    - name: Upload code quality report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: code_quality_summary.md

    - name: Comment PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('code_quality_summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });