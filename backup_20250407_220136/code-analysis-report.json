{
  "project_dir": "/home/skr/projects/MCP-BASE-STACK",
  "timestamp": "2025-04-07T19:07:08.415879",
  "summary": {
    "total_files_analyzed": 49,
    "total_python_files": 33,
    "total_shell_files": 16,
    "total_other_files": 0,
    "compliant_files": 4,
    "files_with_issues": 45,
    "total_issues": 169,
    "missing_elements": 143,
    "redundant_elements": 0,
    "incorrect_implementations": 0,
    "compliance_percentage": 8.16
  },
  "python_analysis": {
    "files": {
      "check_code_quality_nodes.py": {
        "path": "check_code_quality_nodes.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "validate-manifest.py": {
        "path": "validate-manifest.py",
        "module_docstring": "Validate the specification manifest against its schema and validate a project against the manifest.\n\nThis script provides two main functions:\n1. Validate the specification manifest against its JSON Schema\n2. Validate a project directory against the specification manifest\n\nUsage:\n    python validate-manifest.py validate-schema\n    python validate-manifest.py validate-project [directory]",
        "imports": [
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "json",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "re",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pathlib",
            "name": "Path",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "List",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Tuple",
            "asname": null
          },
          {
            "type": "import",
            "name": "jsonschema",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_json_file",
            "docstring": "Load a JSON file.\n\nArgs:\n    file_path: Path to the JSON file\n\nReturns:\n    The loaded JSON data\n\nRaises:\n    FileNotFoundError: If the file does not exist\n    json.JSONDecodeError: If the file is not valid JSON",
            "args": [
              {
                "name": "file_path",
                "annotation": "str"
              }
            ],
            "returns": "Dict[str, Any]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "validate_schema",
            "docstring": "Validate the specification manifest against its JSON Schema.\n\nArgs:\n    manifest_path: Path to the specification manifest\n    schema_path: Path to the JSON Schema\n\nReturns:\n    True if the manifest is valid, False otherwise",
            "args": [
              {
                "name": "manifest_path",
                "annotation": "str"
              },
              {
                "name": "schema_path",
                "annotation": "str"
              }
            ],
            "returns": "bool",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "validate_directory_structure",
            "docstring": "Validate the directory structure against the manifest.\n\nArgs:\n    directory: Path to the directory to validate\n    manifest: The specification manifest\n\nReturns:\n    List of validation errors",
            "args": [
              {
                "name": "directory",
                "annotation": "str"
              },
              {
                "name": "manifest",
                "annotation": "Dict[str, Any]"
              }
            ],
            "returns": "List[str]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "validate_file_presence",
            "docstring": "Validate the presence of required files against the manifest.\n\nArgs:\n    directory: Path to the directory to validate\n    manifest: The specification manifest\n\nReturns:\n    List of validation errors",
            "args": [
              {
                "name": "directory",
                "annotation": "str"
              },
              {
                "name": "manifest",
                "annotation": "Dict[str, Any]"
              }
            ],
            "returns": "List[str]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "validate_naming_conventions",
            "docstring": "Validate naming conventions against the manifest.\n\nArgs:\n    directory: Path to the directory to validate\n    manifest: The specification manifest\n\nReturns:\n    List of validation errors",
            "args": [
              {
                "name": "directory",
                "annotation": "str"
              },
              {
                "name": "manifest",
                "annotation": "Dict[str, Any]"
              }
            ],
            "returns": "List[str]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "validate_project",
            "docstring": "Validate a project directory against the specification manifest.\n\nArgs:\n    directory: Path to the directory to validate\n    manifest_path: Path to the specification manifest\n\nReturns:\n    Tuple of (is_valid, errors)",
            "args": [
              {
                "name": "directory",
                "annotation": "str"
              },
              {
                "name": "manifest_path",
                "annotation": "str"
              }
            ],
            "returns": "Tuple[bool, List[str]]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "main",
            "docstring": "Main function.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "traverse_project.py": {
        "path": "traverse_project.py",
        "module_docstring": "Recursively traverse a project directory and compare it against the specification manifest.\n\nThis script provides functionality to:\n1. Load the specification manifest\n2. Recursively traverse the project directory\n3. Compare each directory and file against the expected structure\n4. Generate a detailed report of compliance and deviations\n5. Output a structured JSON report\n\nUsage:\n    python traverse_project.py --project-dir /path/to/project --manifest /path/to/manifest.json --output /path/to/report.json\n    python traverse_project.py --project-dir /path/to/project --verbose\n    python traverse_project.py --project-dir /path/to/project --dry-run",
        "imports": [
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "json",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "re",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pathlib",
            "name": "Path",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "List",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Tuple",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Set",
            "asname": null
          },
          {
            "type": "import",
            "name": "datetime",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "ProjectTraverser",
            "docstring": "Class to traverse a project directory and compare it against the specification manifest.\n\nThis class provides methods to recursively traverse a project directory,\ncompare it against the expected structure defined in the specification manifest,\nand generate a detailed report of compliance and deviations.\n\nAttributes:\n    project_dir: Path to the project directory\n    manifest: The specification manifest\n    verbose: Whether to enable verbose logging\n    dry_run: Whether to run in dry-run mode (only report issues without making changes)",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize the ProjectTraverser.\n\nArgs:\n    project_dir: Path to the project directory\n    manifest: The specification manifest\n    verbose: Whether to enable verbose logging\n    dry_run: Whether to run in dry-run mode (only report issues without making changes)",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "project_dir",
                    "annotation": "str"
                  },
                  {
                    "name": "manifest",
                    "annotation": "Dict[str, Any]"
                  },
                  {
                    "name": "verbose",
                    "annotation": "bool"
                  },
                  {
                    "name": "dry_run",
                    "annotation": "bool"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "log",
                "docstring": "Log a message if verbose mode is enabled.\n\nArgs:\n    message: The message to log",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "message",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "traverse_directory",
                "docstring": "Recursively traverse the project directory and collect information.\n\nThis method walks through the project directory, collecting information\nabout the actual directory structure and files, and compares them against\nthe expected structure defined in the specification manifest.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "compare_directory_structure",
                "docstring": "Compare the actual directory structure against the expected structure.\n\nThis method checks if all required directories exist and reports any missing directories.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "compare_file_presence",
                "docstring": "Compare the actual file presence against the expected files.\n\nThis method checks if all required files exist and reports any missing files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "check_naming_conventions",
                "docstring": "Check if files follow the naming conventions defined in the manifest.\n\nThis method checks if files follow the naming conventions for their respective types.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "analyze_file_locations",
                "docstring": "Analyze if files are in their ideal locations.\n\nThis method checks if files are in the directories where they would be expected\nbased on the project structure and naming conventions.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "generate_report",
                "docstring": "Generate a detailed report of the project structure analysis.\n\nReturns:\n    A dictionary containing the detailed report",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "save_report",
                "docstring": "Save the report to a JSON file.\n\nArgs:\n    output_path: Path to save the report to",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "output_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "print_summary",
                "docstring": "Print a summary of the report to the console.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [
          {
            "name": "load_json_file",
            "docstring": "Load a JSON file.\n\nArgs:\n    file_path: Path to the JSON file\n\nReturns:\n    The loaded JSON data\n\nRaises:\n    FileNotFoundError: If the file does not exist\n    json.JSONDecodeError: If the file is not valid JSON",
            "args": [
              {
                "name": "file_path",
                "annotation": "str"
              }
            ],
            "returns": "Dict[str, Any]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "main",
            "docstring": "Main function.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "check_kg_nodes.py": {
        "path": "check_kg_nodes.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "analyze_code.py": {
        "path": "analyze_code.py",
        "module_docstring": "Static code analysis script that verifies scripts against the specification manifest.\n\nThis script provides functionality to:\n1. Load the specification manifest\n2. Parse Python, Shell, and other script files to extract their structure\n3. Compare the actual code structure with the expected structure\n4. Identify missing, redundant, or incorrectly implemented functions/code segments\n5. Generate a detailed report of compliance and deviations\n\nUsage:\n    python analyze_code.py --project-dir /path/to/project --manifest /path/to/manifest.json --output /path/to/report.json\n    python analyze_code.py --file /path/to/specific/file.py --manifest /path/to/manifest.json\n    python analyze_code.py --project-dir /path/to/project --verbose\n    python analyze_code.py --project-dir /path/to/project --dry-run",
        "imports": [
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "ast",
            "asname": null
          },
          {
            "type": "import",
            "name": "json",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "re",
            "asname": null
          },
          {
            "type": "import",
            "name": "subprocess",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pathlib",
            "name": "Path",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "List",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Tuple",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Set",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Union",
            "asname": null
          },
          {
            "type": "import",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "CodeAnalyzer",
            "docstring": "Class to analyze code structure and compare it against the specification manifest.\n\nThis class provides methods to parse Python, Shell, and other script files,\nextract their structure, compare it against the expected structure defined in\nthe specification manifest, and generate a detailed report of compliance and deviations.\n\nAttributes:\n    project_dir: Path to the project directory\n    manifest: The specification manifest\n    verbose: Whether to enable verbose logging\n    dry_run: Whether to run in dry-run mode (only report issues without making changes)",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize the CodeAnalyzer.\n\nArgs:\n    project_dir: Path to the project directory\n    manifest: The specification manifest\n    verbose: Whether to enable verbose logging\n    dry_run: Whether to run in dry-run mode (only report issues without making changes)",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "project_dir",
                    "annotation": "str"
                  },
                  {
                    "name": "manifest",
                    "annotation": "Dict[str, Any]"
                  },
                  {
                    "name": "verbose",
                    "annotation": "bool"
                  },
                  {
                    "name": "dry_run",
                    "annotation": "bool"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "log",
                "docstring": "Log a message if verbose mode is enabled.\n\nArgs:\n    message: The message to log",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "message",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "analyze_project",
                "docstring": "Analyze all code files in the project directory.\n\nThis method walks through the project directory, identifies code files,\nand analyzes each file based on its type.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "analyze_file",
                "docstring": "Analyze a specific file based on its type.\n\nArgs:\n    file_path: Path to the file to analyze",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "analyze_python_file",
                "docstring": "Analyze a Python file to extract its structure and check compliance.\n\nArgs:\n    file_path: Path to the Python file to analyze",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "_extract_function_info",
                "docstring": "Extract information about a function or method.\n\nArgs:\n    node: The AST node representing the function\n    content: The source code content\n    \nReturns:\n    A dictionary containing information about the function",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.FunctionDef"
                  },
                  {
                    "name": "content",
                    "annotation": "str"
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_annotation",
                "docstring": "Get the string representation of a type annotation.\n\nArgs:\n    node: The AST node representing the annotation\n    content: The source code content\n    \nReturns:\n    The string representation of the annotation",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.AST"
                  },
                  {
                    "name": "content",
                    "annotation": "str"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_base_name",
                "docstring": "Get the name of a base class.\n\nArgs:\n    node: The AST node representing the base class\n    \nReturns:\n    The name of the base class",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.AST"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_node_source",
                "docstring": "Get the source code for an AST node.\n\nArgs:\n    node: The AST node\n    content: The source code content\n    \nReturns:\n    The source code for the node",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "node",
                    "annotation": "ast.AST"
                  },
                  {
                    "name": "content",
                    "annotation": "str"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_check_python_naming_conventions",
                "docstring": "Check if Python code elements follow the naming conventions.\n\nArgs:\n    file_structure: The structure of the Python file",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_structure",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_check_python_code_patterns",
                "docstring": "Check if Python code follows the required code patterns.\n\nArgs:\n    file_structure: The structure of the Python file",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_structure",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "analyze_shell_file",
                "docstring": "Analyze a Shell script file to extract its structure and check compliance.\n\nArgs:\n    file_path: Path to the Shell script file to analyze",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "_check_shell_naming_conventions",
                "docstring": "Check if Shell script elements follow the naming conventions.\n\nArgs:\n    file_structure: The structure of the Shell script file",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_structure",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_check_shell_code_patterns",
                "docstring": "Check if Shell script follows the required code patterns.\n\nArgs:\n    file_structure: The structure of the Shell script file",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_structure",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "analyze_other_file",
                "docstring": "Analyze other script files to extract their structure and check compliance.\n\nArgs:\n    file_path: Path to the script file to analyze",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "generate_report",
                "docstring": "Generate a detailed report of the code analysis.\n\nReturns:\n    A dictionary containing the detailed report",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "save_report",
                "docstring": "Save the report to a JSON file.\n\nArgs:\n    output_path: Path to save the report to",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "output_path",
                    "annotation": "str"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "print_summary",
                "docstring": "Print a summary of the report to the console.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [
          {
            "name": "load_json_file",
            "docstring": "Load a JSON file.\n\nArgs:\n    file_path: Path to the JSON file\n\nReturns:\n    The loaded JSON data\n\nRaises:\n    FileNotFoundError: If the file does not exist\n    json.JSONDecodeError: If the file is not valid JSON",
            "args": [
              {
                "name": "file_path",
                "annotation": "str"
              }
            ],
            "returns": "Dict[str, Any]",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "main",
            "docstring": "Main function.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "tests/test_code_review.py": {
        "path": "tests/test_code_review.py",
        "module_docstring": "Test file for the automated code review tool.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "List",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "import",
            "name": "json",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "DataProcessor",
            "docstring": null,
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": null,
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "data_source",
                    "annotation": null
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "process",
                "docstring": null,
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              }
            ],
            "attributes": [],
            "has_proper_docstring": false
          }
        ],
        "functions": [
          {
            "name": "calculate_sum",
            "docstring": null,
            "args": [
              {
                "name": "numbers",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": false
          },
          {
            "name": "process_data",
            "docstring": null,
            "args": [
              {
                "name": "arg1",
                "annotation": null
              },
              {
                "name": "arg2",
                "annotation": null
              },
              {
                "name": "arg3",
                "annotation": null
              },
              {
                "name": "arg4",
                "annotation": null
              },
              {
                "name": "arg5",
                "annotation": null
              },
              {
                "name": "arg6",
                "annotation": null
              },
              {
                "name": "arg7",
                "annotation": null
              },
              {
                "name": "arg8",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": false
          },
          {
            "name": "run_command",
            "docstring": null,
            "args": [
              {
                "name": "cmd",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": false
          }
        ],
        "constants": [
          {
            "name": "PASSWORD",
            "value": "\"hardcoded_password\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/__init__.py": {
        "path": "services/mcp-server/src/__init__.py",
        "module_docstring": null,
        "imports": [],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/app.py": {
        "path": "services/mcp-server/src/app.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "import",
            "name": "time",
            "asname": null
          },
          {
            "type": "import",
            "name": "platform",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "fastapi",
            "name": "FastAPI",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "fastapi",
            "name": "Depends",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "fastapi",
            "name": "HTTPException",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pydantic",
            "name": "BaseModel",
            "asname": null
          },
          {
            "type": "import",
            "name": "requests",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "di.containers",
            "name": "Container",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "services.prompt_processor",
            "name": "PromptProcessor",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "services.example_service",
            "name": "ExampleService",
            "asname": null
          },
          {
            "type": "import",
            "name": "uvicorn",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "InferRequest",
            "docstring": null,
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": false
          },
          {
            "name": "InferResponse",
            "docstring": null,
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": false
          }
        ],
        "functions": [
          {
            "name": "get_prompt_processor",
            "docstring": null,
            "args": [],
            "returns": "PromptProcessor",
            "has_proper_docstring": false,
            "has_type_hints": true
          },
          {
            "name": "get_llm_client",
            "docstring": null,
            "args": [],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": true
          },
          {
            "name": "get_example_service",
            "docstring": null,
            "args": [],
            "returns": "ExampleService",
            "has_proper_docstring": false,
            "has_type_hints": true
          },
          {
            "name": "mcp_infer",
            "docstring": "Main inference endpoint: takes a prompt and either handles it via tools or LLM.",
            "args": [
              {
                "name": "request",
                "annotation": "InferRequest"
              },
              {
                "name": "prompt_processor",
                "annotation": "PromptProcessor"
              },
              {
                "name": "llm_client",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": false
          },
          {
            "name": "health_check",
            "docstring": "Health check endpoint to verify the server is running",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "system_info",
            "docstring": "Returns system information for debugging",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "example_info",
            "docstring": "Example endpoint that demonstrates dependency injection.\n\nThis endpoint uses the ExampleService which is injected via dependency injection.",
            "args": [
              {
                "name": "example_service",
                "annotation": "ExampleService"
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": true
          },
          {
            "name": "example_process",
            "docstring": "Example endpoint that processes data using the example service.\n\nArgs:\n    data: Input data to process\n    \nReturns:\n    str: Processed data",
            "args": [
              {
                "name": "data",
                "annotation": "str"
              },
              {
                "name": "example_service",
                "annotation": "ExampleService"
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/mcp_server.py": {
        "path": "services/mcp-server/src/mcp_server.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "subprocess",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "fastapi",
            "name": "FastAPI",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "fastapi",
            "name": "HTTPException",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pydantic",
            "name": "BaseModel",
            "asname": null
          },
          {
            "type": "import",
            "name": "requests",
            "asname": null
          },
          {
            "type": "import",
            "name": "time",
            "asname": null
          },
          {
            "type": "import",
            "name": "platform",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "uvicorn",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "InferRequest",
            "docstring": null,
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": false
          },
          {
            "name": "InferResponse",
            "docstring": null,
            "bases": [
              "BaseModel"
            ],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": false
          }
        ],
        "functions": [
          {
            "name": "process_prompt",
            "docstring": null,
            "args": [
              {
                "name": "prompt",
                "annotation": "str"
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": true
          },
          {
            "name": "mcp_infer",
            "docstring": "Main inference endpoint: takes a prompt and either handles it via tools or LLM.",
            "args": [
              {
                "name": "request",
                "annotation": "InferRequest"
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "health_check",
            "docstring": "Health check endpoint to verify the server is running",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "system_info",
            "docstring": "Returns system information for debugging",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "services/mcp-server/src/services/prompt_processor.py": {
        "path": "services/mcp-server/src/services/prompt_processor.py",
        "module_docstring": "Prompt Processor Service.\n\nThis service is responsible for processing user prompts and determining\nwhether they should be handled by a tool or sent to the LLM.",
        "imports": [
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Tuple",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Callable",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "PromptProcessor",
            "docstring": "Service for processing user prompts.\n\nThis service analyzes user prompts to determine if they should be\nhandled by a tool (like shell commands) or sent to the LLM for processing.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize the prompt processor.\n\nArgs:\n    logger: Logger instance\n    shell_command_executor: Function to execute shell commands",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "logger",
                    "annotation": "logging.Logger"
                  },
                  {
                    "name": "shell_command_executor",
                    "annotation": "Callable[[str, int], Tuple[bool, str]]"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "process",
                "docstring": "Process a user prompt.\n\nArgs:\n    prompt: The user prompt to process\n    \nReturns:\n    Tuple[Optional[str], Optional[str]]: A tuple containing:\n        - The prompt to send to the LLM (or None if handled by a tool)\n        - The output from a tool (or None if no tool was used)",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "prompt",
                    "annotation": "str"
                  }
                ],
                "returns": "Tuple[Optional[str], Optional[str]]",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/services/example_service.py": {
        "path": "services/mcp-server/src/services/example_service.py",
        "module_docstring": "Example Service.\n\nThis is a simple example service that demonstrates how to use the dependency injection framework.\nIt shows how to inject dependencies and use them in a service class.",
        "imports": [
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "ExampleService",
            "docstring": "Example service that demonstrates dependency injection.\n\nThis service shows how to:\n1. Inject dependencies through the constructor\n2. Use those dependencies in service methods\n3. Structure a service class for testability",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize the example service with injected dependencies.\n\nArgs:\n    logger: Logger instance\n    config: Configuration dictionary",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "logger",
                    "annotation": "logging.Logger"
                  },
                  {
                    "name": "config",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "get_service_info",
                "docstring": "Get information about this service.\n\nReturns:\n    Dict[str, Any]: Service information",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "process_data",
                "docstring": "Process some data using the service.\n\nArgs:\n    data: Input data to process\n    \nReturns:\n    str: Processed data",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "data",
                    "annotation": "str"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/services/__init__.py": {
        "path": "services/mcp-server/src/services/__init__.py",
        "module_docstring": "Services module for MCP Server.\n\nThis module contains service classes that implement the business logic of the application.",
        "imports": [
          {
            "type": "from_import",
            "module": "prompt_processor",
            "name": "PromptProcessor",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "example_service",
            "name": "ExampleService",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/di/__init__.py": {
        "path": "services/mcp-server/src/di/__init__.py",
        "module_docstring": "Dependency Injection module for MCP Server.\n\nThis module provides a centralized dependency injection framework\nfor managing component dependencies and improving testability.",
        "imports": [
          {
            "type": "from_import",
            "module": "containers",
            "name": "Container",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "ConfigProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "LoggingProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "LLMClientProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "ToolProvider",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/di/providers.py": {
        "path": "services/mcp-server/src/di/providers.py",
        "module_docstring": "Providers for the dependency injection container.\n\nThis module defines the service providers that will be used by the dependency injection container.\nEach provider is responsible for creating and configuring a specific service.",
        "imports": [
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "import",
            "name": "requests",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dependency_injector.providers",
            "name": "Factory",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dependency_injector.providers",
            "name": "Singleton",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dependency_injector.providers",
            "name": "Configuration",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "tools.shell.command",
            "name": "execute_shell_command",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "ConfigProvider",
            "docstring": "Provider for configuration settings.",
            "bases": [],
            "methods": [
              {
                "name": "get_config",
                "docstring": "Get configuration settings from environment variables.\n\nReturns:\n    Dict[str, Any]: Configuration dictionary",
                "args": [],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "LoggingProvider",
            "docstring": "Provider for logging services.",
            "bases": [],
            "methods": [
              {
                "name": "get_logger",
                "docstring": "Configure and return a logger.\n\nArgs:\n    name: Logger name\n    config: Logging configuration\n    \nReturns:\n    logging.Logger: Configured logger",
                "args": [
                  {
                    "name": "name",
                    "annotation": "str"
                  },
                  {
                    "name": "config",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "logging.Logger",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "LLMClientProvider",
            "docstring": "Provider for LLM client services.",
            "bases": [],
            "methods": [
              {
                "name": "get_client",
                "docstring": "Create and return an LLM client.\n\nArgs:\n    config: Configuration dictionary\n    logger: Logger instance\n    \nReturns:\n    LLMClient: Client for interacting with the LLM server",
                "args": [
                  {
                    "name": "config",
                    "annotation": "Dict[str, Any]"
                  },
                  {
                    "name": "logger",
                    "annotation": "logging.Logger"
                  }
                ],
                "returns": null,
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "LLMClient",
            "docstring": "Client for interacting with the LLM server.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize the LLM client.\n\nArgs:\n    host: LLM server host\n    port: LLM server port\n    model: Model name to use\n    timeout: Request timeout in seconds\n    logger: Logger instance",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "host",
                    "annotation": "str"
                  },
                  {
                    "name": "port",
                    "annotation": "str"
                  },
                  {
                    "name": "model",
                    "annotation": "str"
                  },
                  {
                    "name": "timeout",
                    "annotation": "int"
                  },
                  {
                    "name": "logger",
                    "annotation": "logging.Logger"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "generate",
                "docstring": "Generate a response from the LLM.\n\nArgs:\n    prompt: Input prompt\n    \nReturns:\n    str: Generated response\n    \nRaises:\n    Exception: If the request fails",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "prompt",
                    "annotation": "str"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "check_connection",
                "docstring": "Check connection to the LLM server.\n\nReturns:\n    Dict[str, Any]: Connection status information",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "ToolProvider",
            "docstring": "Provider for tool services.",
            "bases": [],
            "methods": [
              {
                "name": "get_shell_command_executor",
                "docstring": "Create and return a shell command executor.\n\nArgs:\n    logger: Logger instance\n    \nReturns:\n    Callable: Function to execute shell commands",
                "args": [
                  {
                    "name": "logger",
                    "annotation": "logging.Logger"
                  }
                ],
                "returns": null,
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [
          {
            "name": "execute_command",
            "docstring": null,
            "args": [
              {
                "name": "command",
                "annotation": "str"
              },
              {
                "name": "timeout",
                "annotation": "int"
              }
            ],
            "returns": null,
            "has_proper_docstring": false,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "services/mcp-server/src/di/containers.py": {
        "path": "services/mcp-server/src/di/containers.py",
        "module_docstring": "Dependency Injection Container for MCP Server.\n\nThis module defines the main dependency injection container that wires up\nall the application dependencies and makes them available throughout the application.",
        "imports": [
          {
            "type": "from_import",
            "module": "dependency_injector",
            "name": "containers",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dependency_injector",
            "name": "providers",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "ConfigProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "LoggingProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "LLMClientProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "providers",
            "name": "ToolProvider",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "services.prompt_processor",
            "name": "PromptProcessor",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "services.example_service",
            "name": "ExampleService",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "Container",
            "docstring": "Dependency Injection Container for MCP Server.\n\nThis container manages all application dependencies and provides\na clean way to access services throughout the application.",
            "bases": [
              "containers.DeclarativeContainer"
            ],
            "methods": [],
            "attributes": [
              {
                "name": "config",
                "value": "providers.Singleton(\n        ConfigProvider.get_config\n    )"
              },
              {
                "name": "logger",
                "value": "providers.Singleton(\n        LoggingProvider.get_logger,\n        name=\"mcp_server\",\n        config=config\n    )"
              },
              {
                "name": "shell_command_executor",
                "value": "providers.Singleton(\n        ToolProvider.get_shell_command_executor,\n        logger=logger\n    )"
              },
              {
                "name": "llm_client",
                "value": "providers.Singleton(\n        LLMClientProvider.get_client,\n        config=config,\n        logger=logger\n    )"
              },
              {
                "name": "prompt_processor",
                "value": "providers.Singleton(\n        PromptProcessor,\n        logger=logger,\n        shell_command_executor=shell_command_executor\n    )"
              },
              {
                "name": "example_service",
                "value": "providers.Singleton(\n        ExampleService,\n        logger=logger,\n        config=config\n    )"
              }
            ],
            "has_proper_docstring": true
          }
        ],
        "functions": [],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/tools/__init__.py": {
        "path": "services/mcp-server/src/tools/__init__.py",
        "module_docstring": null,
        "imports": [],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/tools/shell/__init__.py": {
        "path": "services/mcp-server/src/tools/shell/__init__.py",
        "module_docstring": null,
        "imports": [],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "services/mcp-server/src/tools/shell/command.py": {
        "path": "services/mcp-server/src/tools/shell/command.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "subprocess",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "execute_shell_command",
            "docstring": "Execute a shell command and return the result\n\nArgs:\n    command: The shell command to execute\n    timeout: Maximum execution time in seconds\n    \nReturns:\n    tuple: (success, output) where success is a boolean and output is the command output or error",
            "args": [
              {
                "name": "command",
                "annotation": "str"
              },
              {
                "name": "timeout",
                "annotation": "int"
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "core/kg/scripts/record_dependency_injection.py": {
        "path": "core/kg/scripts/record_dependency_injection.py",
        "module_docstring": "Record the dependency injection implementation in the knowledge graph.\n\nThis script records the dependency injection components and files in the knowledge graph,\ndocumenting the rationale and purpose of this architectural improvement.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "traceback",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_knowledge_graph",
            "docstring": "Load the knowledge graph from files.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "save_knowledge_graph",
            "docstring": "Save the knowledge graph to files.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_di_file",
            "docstring": "Record a dependency injection file in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "file_id",
                "annotation": null
              },
              {
                "name": "file_name",
                "annotation": null
              },
              {
                "name": "file_path",
                "annotation": null
              },
              {
                "name": "file_description",
                "annotation": null
              },
              {
                "name": "file_language",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "add_dependency_injection_component",
            "docstring": "Add or update the dependency injection component in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "connect_file_to_component",
            "docstring": "Connect a file to a component in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "file_id",
                "annotation": null
              },
              {
                "name": "component_id",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_migration_decision",
            "docstring": "Record the implementation of dependency injection as a migration decision.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "main",
            "docstring": "Record the dependency injection implementation in the knowledge graph.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "core/kg/scripts/setup_knowledge_graph.py": {
        "path": "core/kg/scripts/setup_knowledge_graph.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "matplotlib.pyplot",
            "asname": "plt"
          }
        ],
        "classes": [
          {
            "name": "KnowledgeGraphSetup",
            "docstring": null,
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": null,
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "initialize_graph",
                "docstring": "Initialize the base Knowledge Graph structure",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": null,
                "has_proper_docstring": true,
                "has_type_hints": false
              },
              {
                "name": "save_graphs",
                "docstring": "Save both graph formats to files",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": null,
                "has_proper_docstring": true,
                "has_type_hints": false
              }
            ],
            "attributes": [],
            "has_proper_docstring": false
          }
        ],
        "functions": [],
        "constants": [
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          },
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "KG_DOCS_DIR",
            "value": "\"core/kg/docs\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "core/kg/scripts/update_feature.py": {
        "path": "core/kg/scripts/update_feature.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "update_feature",
            "docstring": "Update the status of a feature after implementation",
            "args": [
              {
                "name": "name",
                "annotation": null
              },
              {
                "name": "status",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "core/kg/scripts/record_code_quality_tooling.py": {
        "path": "core/kg/scripts/record_code_quality_tooling.py",
        "module_docstring": "Record the code quality tooling in the knowledge graph.\n\nThis script records the code quality configuration files and scripts\nas a migration decision in the knowledge graph, documenting the\nrationale and purpose.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "traceback",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_knowledge_graph",
            "docstring": "Load the knowledge graph from files.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "save_knowledge_graph",
            "docstring": "Save the knowledge graph to files.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_config_file",
            "docstring": "Record a configuration file in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "file_id",
                "annotation": null
              },
              {
                "name": "file_name",
                "annotation": null
              },
              {
                "name": "file_path",
                "annotation": null
              },
              {
                "name": "file_description",
                "annotation": null
              },
              {
                "name": "file_language",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_script_file",
            "docstring": "Record a script file in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "script_id",
                "annotation": null
              },
              {
                "name": "script_name",
                "annotation": null
              },
              {
                "name": "script_path",
                "annotation": null
              },
              {
                "name": "script_description",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "add_code_quality_component",
            "docstring": "Add or update the code quality component in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_migration_decision",
            "docstring": "Record the creation of code quality tooling as a migration decision.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "main",
            "docstring": "Record the code quality tooling in the knowledge graph.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "core/kg/scripts/record_github_actions_workflow.py": {
        "path": "core/kg/scripts/record_github_actions_workflow.py",
        "module_docstring": "Record the GitHub Actions workflow file in the knowledge graph.\n\nThis script records the GitHub Actions workflow file for code quality checks\nas a continuous integration implementation in the knowledge graph,\ndocumenting the rationale and purpose.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "traceback",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_knowledge_graph",
            "docstring": "Load the knowledge graph from files.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "save_knowledge_graph",
            "docstring": "Save the knowledge graph to files.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_workflow_file",
            "docstring": "Record the GitHub Actions workflow file in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_ci_implementation_decision",
            "docstring": "Record the implementation of CI for code quality as a decision.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "main",
            "docstring": "Record the GitHub Actions workflow in the knowledge graph.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "core/kg/scripts/update_knowledge_graph.py": {
        "path": "core/kg/scripts/update_knowledge_graph.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "update_knowledge_graph",
            "docstring": "Update the Knowledge Graph based on current implementation status",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "update_directory_structure",
            "docstring": "Update the Knowledge Graph with directory structure information",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "ns",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "update_directory_info",
            "docstring": "Add or update directory information in the graph",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "ns",
                "annotation": null
              },
              {
                "name": "path",
                "annotation": null
              },
              {
                "name": "node_id",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "count_files_recursive",
            "docstring": "Count files recursively in a directory",
            "args": [
              {
                "name": "directory",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "register_feature",
            "docstring": "Register a new feature in the Knowledge Graph",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "ns",
                "annotation": null
              },
              {
                "name": "feature_id",
                "annotation": null
              },
              {
                "name": "name",
                "annotation": null
              },
              {
                "name": "description",
                "annotation": null
              },
              {
                "name": "owner",
                "annotation": null
              },
              {
                "name": "status",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "core/kg/scripts/record_advanced_code_quality_tools.py": {
        "path": "core/kg/scripts/record_advanced_code_quality_tools.py",
        "module_docstring": "Record the advanced code quality tools in the knowledge graph.\n\nThis script records the advanced code quality tools (generate_quality_report.py,\nautomated_code_review.py, and code_review.yaml) in the knowledge graph,\ndocumenting their purpose and relationships with the code_quality component.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "traceback",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_knowledge_graph",
            "docstring": "Load the knowledge graph from files.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "save_knowledge_graph",
            "docstring": "Save the knowledge graph to files.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_file",
            "docstring": "Record a file in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "file_id",
                "annotation": null
              },
              {
                "name": "file_name",
                "annotation": null
              },
              {
                "name": "file_path",
                "annotation": null
              },
              {
                "name": "file_description",
                "annotation": null
              },
              {
                "name": "file_language",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_advanced_code_quality_decision",
            "docstring": "Record the implementation of advanced code quality tools as a decision.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "main",
            "docstring": "Record the advanced code quality tools in the knowledge graph.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "core/kg/scripts/register_feature.py": {
        "path": "core/kg/scripts/register_feature.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "register_feature",
            "docstring": "Register a new feature in the Knowledge Graph before implementation",
            "args": [
              {
                "name": "name",
                "annotation": null
              },
              {
                "name": "description",
                "annotation": null
              },
              {
                "name": "owner",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": false,
        "has_context_manager": false,
        "has_logging": false
      },
      "core/kg/scripts/add_git_hooks_to_kg.py": {
        "path": "core/kg/scripts/add_git_hooks_to_kg.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "add_git_hooks_to_kg",
            "docstring": "Add Git Hooks component and related files to the Knowledge Graph",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "core/kg/scripts/record_conventions_creation.py": {
        "path": "core/kg/scripts/record_conventions_creation.py",
        "module_docstring": "Record the creation of convention documents in the knowledge graph.\n\nThis script records the creation of the style guide, coding conventions,\nreview checklist, and graph guidelines as a migration decision in the\nknowledge graph, documenting the rationale and purpose.",
        "imports": [
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "datetime",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Graph",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Namespace",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "Literal",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib",
            "name": "URIRef",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDF",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "rdflib.namespace",
            "name": "RDFS",
            "asname": null
          },
          {
            "type": "import",
            "name": "traceback",
            "asname": null
          }
        ],
        "classes": [],
        "functions": [
          {
            "name": "load_knowledge_graph",
            "docstring": "Load the knowledge graph from files.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "save_knowledge_graph",
            "docstring": "Save the knowledge graph to files.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_convention_document",
            "docstring": "Record a convention document in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              },
              {
                "name": "doc_id",
                "annotation": null
              },
              {
                "name": "doc_name",
                "annotation": null
              },
              {
                "name": "doc_path",
                "annotation": null
              },
              {
                "name": "doc_description",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "add_code_quality_component",
            "docstring": "Add or update the code quality component in the knowledge graph.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "record_migration_decision",
            "docstring": "Record the creation of convention documents as a migration decision.",
            "args": [
              {
                "name": "nx_graph",
                "annotation": null
              },
              {
                "name": "rdf_graph",
                "annotation": null
              }
            ],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": false
          },
          {
            "name": "main",
            "docstring": "Record the convention documents creation in the knowledge graph.",
            "args": [],
            "returns": null,
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "KG_DATA_DIR",
            "value": "\"core/kg/data\""
          },
          {
            "name": "PROJECT_NAME",
            "value": "\"MCP-BASE-STACK\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "scripts/maintenance/verify_kg_migration.py": {
        "path": "scripts/maintenance/verify_kg_migration.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "scripts/maintenance/automated_code_review.py": {
        "path": "scripts/maintenance/automated_code_review.py",
        "module_docstring": "Automated Code Review Tool for MCP-BASE-STACK.\n\nThis script analyzes code changes in a pull request or between git references,\nproviding detailed feedback on code quality, potential bugs, security vulnerabilities,\nperformance concerns, documentation completeness, and test coverage.\n\nUsage:\n    python automated_code_review.py [options]\n\nOptions:\n    --pr PR_NUMBER             Pull request number to analyze\n    --base COMMIT              Base git reference for comparison\n    --head COMMIT              Head git reference for comparison\n    --config PATH              Path to configuration file [default: config/code_review.yaml]\n    --output PATH              Output file path [default: code_review_report.md]\n    --detail {high,medium,low} Level of detail in the report [default: medium]\n    --update-kg                Update the knowledge graph with the review results\n    --help                     Show this help message and exit",
        "imports": [
          {
            "type": "import",
            "name": "argparse",
            "asname": null
          },
          {
            "type": "import",
            "name": "ast",
            "asname": null
          },
          {
            "type": "import",
            "name": "configparser",
            "asname": null
          },
          {
            "type": "import",
            "name": "datetime",
            "asname": null
          },
          {
            "type": "import",
            "name": "json",
            "asname": null
          },
          {
            "type": "import",
            "name": "logging",
            "asname": null
          },
          {
            "type": "import",
            "name": "os",
            "asname": null
          },
          {
            "type": "import",
            "name": "re",
            "asname": null
          },
          {
            "type": "import",
            "name": "subprocess",
            "asname": null
          },
          {
            "type": "import",
            "name": "sys",
            "asname": null
          },
          {
            "type": "import",
            "name": "tempfile",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dataclasses",
            "name": "dataclass",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "dataclasses",
            "name": "field",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "enum",
            "name": "Enum",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "pathlib",
            "name": "Path",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Any",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Dict",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "List",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Optional",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Set",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Tuple",
            "asname": null
          },
          {
            "type": "from_import",
            "module": "typing",
            "name": "Union",
            "asname": null
          },
          {
            "type": "import",
            "name": "yaml",
            "asname": null
          }
        ],
        "classes": [
          {
            "name": "SeverityLevel",
            "docstring": "Severity levels for issues.",
            "bases": [
              "Enum"
            ],
            "methods": [],
            "attributes": [
              {
                "name": "CRITICAL",
                "value": "\"critical\""
              },
              {
                "name": "HIGH",
                "value": "\"high\""
              },
              {
                "name": "MEDIUM",
                "value": "\"medium\""
              },
              {
                "name": "LOW",
                "value": "\"low\""
              }
            ],
            "has_proper_docstring": true
          },
          {
            "name": "Issue",
            "docstring": "Represents a code issue found during review.",
            "bases": [],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "FileChange",
            "docstring": "Represents a changed file in a PR or between git references.",
            "bases": [],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "ReviewResult",
            "docstring": "Results of a code review.",
            "bases": [],
            "methods": [],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "CodeReviewConfig",
            "docstring": "Configuration for the code review tool.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize with default configuration.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "config_path",
                    "annotation": "Optional[Path]"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "_load_default_config",
                "docstring": "Load default configuration.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "Dict[str, Any]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_load_config",
                "docstring": "Load configuration from file.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_merge_configs",
                "docstring": "Recursively merge user config into default config.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "default_config",
                    "annotation": "Dict[str, Any]"
                  },
                  {
                    "name": "user_config",
                    "annotation": "Dict[str, Any]"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_save_config",
                "docstring": "Save configuration to file.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "get",
                "docstring": "Get a configuration value.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "key",
                    "annotation": "str"
                  },
                  {
                    "name": "default",
                    "annotation": "Any"
                  }
                ],
                "returns": "Any",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "GitDiffAnalyzer",
            "docstring": "Analyzes git diffs between two references.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize with base and head references.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "base",
                    "annotation": "str"
                  },
                  {
                    "name": "head",
                    "annotation": "str"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "get_changed_files",
                "docstring": "Get a list of changed files between base and head.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  }
                ],
                "returns": "List[FileChange]",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "_get_language_for_file",
                "docstring": "Determine the language for a file based on its extension.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_path",
                    "annotation": "str"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_line_changes",
                "docstring": "Get line changes for a file.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_change",
                    "annotation": "FileChange"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": false,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "CodeQualityAnalyzer",
            "docstring": "Analyzes code quality using various tools.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize with configuration.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "config",
                    "annotation": "CodeReviewConfig"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "analyze_changes",
                "docstring": "Analyze code changes and return issues.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "changes",
                    "annotation": "List[FileChange]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "_get_code_snippet",
                "docstring": "Get a code snippet from the content around the specified line number.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "content",
                    "annotation": "str"
                  },
                  {
                    "name": "line_number",
                    "annotation": "int"
                  },
                  {
                    "name": "context",
                    "annotation": "int"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_run_flake8",
                "docstring": "Run flake8 on the specified files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_paths",
                    "annotation": "List[str]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_flake8_fix",
                "docstring": "Get a suggested fix for a flake8 issue.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "code",
                    "annotation": "str"
                  },
                  {
                    "name": "message",
                    "annotation": "str"
                  }
                ],
                "returns": "Optional[str]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_run_pylint",
                "docstring": "Run pylint on the specified files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_paths",
                    "annotation": "List[str]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_pylint_fix",
                "docstring": "Get a suggested fix for a pylint issue.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "symbol",
                    "annotation": "str"
                  },
                  {
                    "name": "message",
                    "annotation": "str"
                  }
                ],
                "returns": "Optional[str]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_run_mypy",
                "docstring": "Run mypy on the specified files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_paths",
                    "annotation": "List[str]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_get_mypy_fix",
                "docstring": "Get a suggested fix for a mypy issue.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "level",
                    "annotation": "str"
                  },
                  {
                    "name": "message",
                    "annotation": "str"
                  }
                ],
                "returns": "Optional[str]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_run_bandit",
                "docstring": "Run bandit on the specified files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_paths",
                    "annotation": "List[str]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_run_shellcheck",
                "docstring": "Run shellcheck on the specified files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "file_paths",
                    "annotation": "List[str]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              },
              {
                "name": "_analyze_docstrings",
                "docstring": "Analyze docstrings in Python files.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "files",
                    "annotation": "List[FileChange]"
                  }
                ],
                "returns": "List[Issue]",
                "has_proper_docstring": false,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "ReportGenerator",
            "docstring": "Generates a markdown report from review results.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize with configuration.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "config",
                    "annotation": "CodeReviewConfig"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "generate_report",
                "docstring": "Generate a markdown report from review results.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "result",
                    "annotation": "ReviewResult"
                  }
                ],
                "returns": "str",
                "has_proper_docstring": true,
                "has_type_hints": true
              },
              {
                "name": "_format_issues",
                "docstring": "Format a list of issues as markdown.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "issues",
                    "annotation": "List[Issue]"
                  },
                  {
                    "name": "detail_level",
                    "annotation": "str"
                  },
                  {
                    "name": "include_code_snippets",
                    "annotation": "bool"
                  },
                  {
                    "name": "include_suggested_fixes",
                    "annotation": "bool"
                  }
                ],
                "returns": "List[str]",
                "has_proper_docstring": false,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          },
          {
            "name": "KnowledgeGraphUpdater",
            "docstring": "Updates the knowledge graph with review results.",
            "bases": [],
            "methods": [
              {
                "name": "__init__",
                "docstring": "Initialize with configuration.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "config",
                    "annotation": "CodeReviewConfig"
                  }
                ],
                "returns": null,
                "has_proper_docstring": false,
                "has_type_hints": false
              },
              {
                "name": "update_graph",
                "docstring": "Update the knowledge graph with review results.",
                "args": [
                  {
                    "name": "self",
                    "annotation": null
                  },
                  {
                    "name": "result",
                    "annotation": "ReviewResult"
                  }
                ],
                "returns": "None",
                "has_proper_docstring": true,
                "has_type_hints": true
              }
            ],
            "attributes": [],
            "has_proper_docstring": true
          }
        ],
        "functions": [
          {
            "name": "parse_arguments",
            "docstring": "Parse command-line arguments.",
            "args": [],
            "returns": "argparse.Namespace",
            "has_proper_docstring": true,
            "has_type_hints": true
          },
          {
            "name": "main",
            "docstring": "Main function.",
            "args": [],
            "returns": "int",
            "has_proper_docstring": true,
            "has_type_hints": true
          }
        ],
        "constants": [
          {
            "name": "PROJECT_ROOT",
            "value": "Path(__file__).resolve().parents[2]"
          },
          {
            "name": "DEFAULT_CONFIG_PATH",
            "value": "PROJECT_ROOT / \"config\" / \"code_review.yaml\""
          },
          {
            "name": "DEFAULT_OUTPUT_PATH",
            "value": "PROJECT_ROOT / \"code_review_report.md\""
          },
          {
            "name": "KNOWLEDGE_GRAPH_PATH",
            "value": "PROJECT_ROOT / \"core\" / \"kg\" / \"data\" / \"knowledge_graph.graphml\""
          },
          {
            "name": "LANGUAGE_EXTENSIONS",
            "value": "{\n    \"Python\": [\".py\"],\n    \"JavaScript\": [\".js\", \".jsx\", \".ts\", \".tsx\"],\n    \"HTML\": [\".html\", \".htm\"],\n    \"CSS\": [\".css\", \".scss\", \".sass\"],\n    \"Shell\": [\".sh\", \".bash\"],\n    \"Markdown\": [\".md\"],\n    \"YAML\": [\".yaml\", \".yml\"],\n    \"JSON\": [\".json\"],\n    \"Other\": [],  # Catch-all for other extensions\n}"
          },
          {
            "name": "EXCLUDE_DIRS",
            "value": "[\n    \".git\",\n    \"__pycache__\",\n    \"venv\",\n    \"node_modules\",\n    \"dist\",\n    \"build\",\n    \".venv\",\n]"
          },
          {
            "name": "CRITICAL",
            "value": "\"critical\""
          },
          {
            "name": "HIGH",
            "value": "\"high\""
          },
          {
            "name": "MEDIUM",
            "value": "\"medium\""
          },
          {
            "name": "LOW",
            "value": "\"low\""
          }
        ],
        "has_module_header": true,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": true
      },
      "scripts/deployment/update_kg_deployment.py": {
        "path": "scripts/deployment/update_kg_deployment.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      },
      "scripts/deployment/update_kg_root.py": {
        "path": "scripts/deployment/update_kg_root.py",
        "module_docstring": null,
        "imports": [
          {
            "type": "import",
            "name": "networkx",
            "asname": "nx"
          }
        ],
        "classes": [],
        "functions": [],
        "constants": [],
        "has_module_header": false,
        "has_error_handling": true,
        "has_context_manager": false,
        "has_logging": false
      }
    },
    "issues": [
      {
        "file": "check_code_quality_nodes.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'check_code_quality_nodes.py' is missing the required module header pattern"
      },
      {
        "file": "check_code_quality_nodes.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'check_code_quality_nodes.py' is missing the required error handling pattern"
      },
      {
        "file": "check_kg_nodes.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'check_kg_nodes.py' is missing the required module header pattern"
      },
      {
        "file": "check_kg_nodes.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'check_kg_nodes.py' is missing the required error handling pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._extract_function_info",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._extract_function_info' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_annotation",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._get_annotation' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_base_name",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._get_base_name' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_node_source",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._get_node_source' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_python_naming_conventions",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._check_python_naming_conventions' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_python_code_patterns",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._check_python_code_patterns' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_shell_naming_conventions",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._check_shell_naming_conventions' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_shell_code_patterns",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeAnalyzer._check_shell_code_patterns' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._extract_function_info",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._extract_function_info' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_annotation",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._get_annotation' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_base_name",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._get_base_name' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._get_node_source",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._get_node_source' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_python_naming_conventions",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._check_python_naming_conventions' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_python_code_patterns",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._check_python_code_patterns' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_shell_naming_conventions",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._check_shell_naming_conventions' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "analyze_code.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeAnalyzer._check_shell_code_patterns",
        "pattern_name": "function_definition",
        "message": "Method 'CodeAnalyzer._check_shell_code_patterns' in 'analyze_code.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "DataProcessor",
        "pattern_name": "class_definition",
        "message": "Class 'DataProcessor' in 'tests/test_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "calculate_sum",
        "pattern_name": "function_definition",
        "message": "Function 'calculate_sum' in 'tests/test_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "process_data",
        "pattern_name": "function_definition",
        "message": "Function 'process_data' in 'tests/test_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "run_command",
        "pattern_name": "function_definition",
        "message": "Function 'run_command' in 'tests/test_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "DataProcessor.process",
        "pattern_name": "function_definition",
        "message": "Method 'DataProcessor.process' in 'tests/test_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "calculate_sum",
        "pattern_name": "type_hints",
        "message": "Function 'calculate_sum' in 'tests/test_code_review.py' is missing type hints"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "process_data",
        "pattern_name": "type_hints",
        "message": "Function 'process_data' in 'tests/test_code_review.py' is missing type hints"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "run_command",
        "pattern_name": "type_hints",
        "message": "Function 'run_command' in 'tests/test_code_review.py' is missing type hints"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "DataProcessor.process",
        "pattern_name": "type_hints",
        "message": "Method 'DataProcessor.process' in 'tests/test_code_review.py' is missing type hints"
      },
      {
        "file": "tests/test_code_review.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'tests/test_code_review.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'services/mcp-server/src/__init__.py' is missing the required module header pattern"
      },
      {
        "file": "services/mcp-server/src/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/__init__.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "InferRequest",
        "pattern_name": "class_definition",
        "message": "Class 'InferRequest' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "InferResponse",
        "pattern_name": "class_definition",
        "message": "Class 'InferResponse' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "get_prompt_processor",
        "pattern_name": "function_definition",
        "message": "Function 'get_prompt_processor' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "get_llm_client",
        "pattern_name": "function_definition",
        "message": "Function 'get_llm_client' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "get_example_service",
        "pattern_name": "function_definition",
        "message": "Function 'get_example_service' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "mcp_infer",
        "pattern_name": "function_definition",
        "message": "Function 'mcp_infer' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "example_info",
        "pattern_name": "function_definition",
        "message": "Function 'example_info' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "example_process",
        "pattern_name": "function_definition",
        "message": "Function 'example_process' in 'services/mcp-server/src/app.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/app.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "mcp_infer",
        "pattern_name": "type_hints",
        "message": "Function 'mcp_infer' in 'services/mcp-server/src/app.py' is missing type hints"
      },
      {
        "file": "services/mcp-server/src/mcp_server.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "InferRequest",
        "pattern_name": "class_definition",
        "message": "Class 'InferRequest' in 'services/mcp-server/src/mcp_server.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/mcp_server.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "InferResponse",
        "pattern_name": "class_definition",
        "message": "Class 'InferResponse' in 'services/mcp-server/src/mcp_server.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/mcp_server.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "process_prompt",
        "pattern_name": "function_definition",
        "message": "Function 'process_prompt' in 'services/mcp-server/src/mcp_server.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/services/prompt_processor.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/services/prompt_processor.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/services/example_service.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/services/example_service.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/services/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/services/__init__.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/di/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/di/__init__.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/di/providers.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "execute_command",
        "pattern_name": "function_definition",
        "message": "Function 'execute_command' in 'services/mcp-server/src/di/providers.py' is missing the required docstring pattern"
      },
      {
        "file": "services/mcp-server/src/di/containers.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/di/containers.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/tools/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'services/mcp-server/src/tools/__init__.py' is missing the required module header pattern"
      },
      {
        "file": "services/mcp-server/src/tools/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/tools/__init__.py' is missing the required error handling pattern"
      },
      {
        "file": "services/mcp-server/src/tools/shell/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'services/mcp-server/src/tools/shell/__init__.py' is missing the required module header pattern"
      },
      {
        "file": "services/mcp-server/src/tools/shell/__init__.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'services/mcp-server/src/tools/shell/__init__.py' is missing the required error handling pattern"
      },
      {
        "file": "core/kg/scripts/record_dependency_injection.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "save_knowledge_graph",
        "pattern_name": "type_hints",
        "message": "Function 'save_knowledge_graph' in 'core/kg/scripts/record_dependency_injection.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_dependency_injection.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_di_file",
        "pattern_name": "type_hints",
        "message": "Function 'record_di_file' in 'core/kg/scripts/record_dependency_injection.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_dependency_injection.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "add_dependency_injection_component",
        "pattern_name": "type_hints",
        "message": "Function 'add_dependency_injection_component' in 'core/kg/scripts/record_dependency_injection.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_dependency_injection.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "connect_file_to_component",
        "pattern_name": "type_hints",
        "message": "Function 'connect_file_to_component' in 'core/kg/scripts/record_dependency_injection.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_dependency_injection.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_migration_decision",
        "pattern_name": "type_hints",
        "message": "Function 'record_migration_decision' in 'core/kg/scripts/record_dependency_injection.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/setup_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "class",
        "element_name": "KnowledgeGraphSetup",
        "pattern_name": "class_definition",
        "message": "Class 'KnowledgeGraphSetup' in 'core/kg/scripts/setup_knowledge_graph.py' is missing the required docstring pattern"
      },
      {
        "file": "core/kg/scripts/setup_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "KnowledgeGraphSetup.initialize_graph",
        "pattern_name": "type_hints",
        "message": "Method 'KnowledgeGraphSetup.initialize_graph' in 'core/kg/scripts/setup_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/setup_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "KnowledgeGraphSetup.save_graphs",
        "pattern_name": "type_hints",
        "message": "Method 'KnowledgeGraphSetup.save_graphs' in 'core/kg/scripts/setup_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_feature.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "update_feature",
        "pattern_name": "type_hints",
        "message": "Function 'update_feature' in 'core/kg/scripts/update_feature.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_feature.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'core/kg/scripts/update_feature.py' is missing the required error handling pattern"
      },
      {
        "file": "core/kg/scripts/record_code_quality_tooling.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "save_knowledge_graph",
        "pattern_name": "type_hints",
        "message": "Function 'save_knowledge_graph' in 'core/kg/scripts/record_code_quality_tooling.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_code_quality_tooling.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_config_file",
        "pattern_name": "type_hints",
        "message": "Function 'record_config_file' in 'core/kg/scripts/record_code_quality_tooling.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_code_quality_tooling.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_script_file",
        "pattern_name": "type_hints",
        "message": "Function 'record_script_file' in 'core/kg/scripts/record_code_quality_tooling.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_code_quality_tooling.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "add_code_quality_component",
        "pattern_name": "type_hints",
        "message": "Function 'add_code_quality_component' in 'core/kg/scripts/record_code_quality_tooling.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_code_quality_tooling.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_migration_decision",
        "pattern_name": "type_hints",
        "message": "Function 'record_migration_decision' in 'core/kg/scripts/record_code_quality_tooling.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_github_actions_workflow.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "save_knowledge_graph",
        "pattern_name": "type_hints",
        "message": "Function 'save_knowledge_graph' in 'core/kg/scripts/record_github_actions_workflow.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_github_actions_workflow.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_workflow_file",
        "pattern_name": "type_hints",
        "message": "Function 'record_workflow_file' in 'core/kg/scripts/record_github_actions_workflow.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_github_actions_workflow.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_ci_implementation_decision",
        "pattern_name": "type_hints",
        "message": "Function 'record_ci_implementation_decision' in 'core/kg/scripts/record_github_actions_workflow.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "update_directory_structure",
        "pattern_name": "type_hints",
        "message": "Function 'update_directory_structure' in 'core/kg/scripts/update_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "update_directory_info",
        "pattern_name": "type_hints",
        "message": "Function 'update_directory_info' in 'core/kg/scripts/update_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "count_files_recursive",
        "pattern_name": "type_hints",
        "message": "Function 'count_files_recursive' in 'core/kg/scripts/update_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/update_knowledge_graph.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "register_feature",
        "pattern_name": "type_hints",
        "message": "Function 'register_feature' in 'core/kg/scripts/update_knowledge_graph.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_advanced_code_quality_tools.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "save_knowledge_graph",
        "pattern_name": "type_hints",
        "message": "Function 'save_knowledge_graph' in 'core/kg/scripts/record_advanced_code_quality_tools.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_advanced_code_quality_tools.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_file",
        "pattern_name": "type_hints",
        "message": "Function 'record_file' in 'core/kg/scripts/record_advanced_code_quality_tools.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_advanced_code_quality_tools.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_advanced_code_quality_decision",
        "pattern_name": "type_hints",
        "message": "Function 'record_advanced_code_quality_decision' in 'core/kg/scripts/record_advanced_code_quality_tools.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/register_feature.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "register_feature",
        "pattern_name": "type_hints",
        "message": "Function 'register_feature' in 'core/kg/scripts/register_feature.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/register_feature.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "error_handling",
        "message": "Module 'core/kg/scripts/register_feature.py' is missing the required error handling pattern"
      },
      {
        "file": "core/kg/scripts/record_conventions_creation.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "save_knowledge_graph",
        "pattern_name": "type_hints",
        "message": "Function 'save_knowledge_graph' in 'core/kg/scripts/record_conventions_creation.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_conventions_creation.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_convention_document",
        "pattern_name": "type_hints",
        "message": "Function 'record_convention_document' in 'core/kg/scripts/record_conventions_creation.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_conventions_creation.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "add_code_quality_component",
        "pattern_name": "type_hints",
        "message": "Function 'add_code_quality_component' in 'core/kg/scripts/record_conventions_creation.py' is missing type hints"
      },
      {
        "file": "core/kg/scripts/record_conventions_creation.py",
        "type": "code_pattern",
        "element_type": "function",
        "element_name": "record_migration_decision",
        "pattern_name": "type_hints",
        "message": "Function 'record_migration_decision' in 'core/kg/scripts/record_conventions_creation.py' is missing type hints"
      },
      {
        "file": "scripts/maintenance/verify_kg_migration.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'scripts/maintenance/verify_kg_migration.py' is missing the required module header pattern"
      },
      {
        "file": "scripts/maintenance/generate_quality_report.py",
        "type": "analysis_error",
        "message": "Error analyzing file: unexpected indent (<unknown>, line 829)"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeReviewConfig._load_default_config",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeReviewConfig._load_default_config' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeReviewConfig._load_config",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeReviewConfig._load_config' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeReviewConfig._merge_configs",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeReviewConfig._merge_configs' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeReviewConfig._save_config",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeReviewConfig._save_config' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "GitDiffAnalyzer._get_language_for_file",
        "expected_pattern": "snake_case",
        "message": "Method name 'GitDiffAnalyzer._get_language_for_file' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "GitDiffAnalyzer._get_line_changes",
        "expected_pattern": "snake_case",
        "message": "Method name 'GitDiffAnalyzer._get_line_changes' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_code_snippet",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._get_code_snippet' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_flake8",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._run_flake8' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_flake8_fix",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._get_flake8_fix' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_pylint",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._run_pylint' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_pylint_fix",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._get_pylint_fix' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_mypy",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._run_mypy' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_mypy_fix",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._get_mypy_fix' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_bandit",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._run_bandit' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_shellcheck",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._run_shellcheck' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._analyze_docstrings",
        "expected_pattern": "snake_case",
        "message": "Method name 'CodeQualityAnalyzer._analyze_docstrings' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "naming_convention",
        "element_type": "method",
        "element_name": "ReportGenerator._format_issues",
        "expected_pattern": "snake_case",
        "message": "Method name 'ReportGenerator._format_issues' does not follow the required pattern 'snake_case'"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeReviewConfig._load_default_config",
        "pattern_name": "function_definition",
        "message": "Method 'CodeReviewConfig._load_default_config' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeReviewConfig._load_config",
        "pattern_name": "function_definition",
        "message": "Method 'CodeReviewConfig._load_config' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeReviewConfig._merge_configs",
        "pattern_name": "function_definition",
        "message": "Method 'CodeReviewConfig._merge_configs' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeReviewConfig._save_config",
        "pattern_name": "function_definition",
        "message": "Method 'CodeReviewConfig._save_config' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "GitDiffAnalyzer._get_language_for_file",
        "pattern_name": "function_definition",
        "message": "Method 'GitDiffAnalyzer._get_language_for_file' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "GitDiffAnalyzer._get_line_changes",
        "pattern_name": "function_definition",
        "message": "Method 'GitDiffAnalyzer._get_line_changes' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_code_snippet",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._get_code_snippet' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_flake8",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._run_flake8' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_flake8_fix",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._get_flake8_fix' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_pylint",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._run_pylint' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_pylint_fix",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._get_pylint_fix' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_mypy",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._run_mypy' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._get_mypy_fix",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._get_mypy_fix' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_bandit",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._run_bandit' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._run_shellcheck",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._run_shellcheck' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "CodeQualityAnalyzer._analyze_docstrings",
        "pattern_name": "function_definition",
        "message": "Method 'CodeQualityAnalyzer._analyze_docstrings' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/maintenance/automated_code_review.py",
        "type": "code_pattern",
        "element_type": "method",
        "element_name": "ReportGenerator._format_issues",
        "pattern_name": "function_definition",
        "message": "Method 'ReportGenerator._format_issues' in 'scripts/maintenance/automated_code_review.py' is missing the required docstring pattern"
      },
      {
        "file": "scripts/deployment/update_kg_deployment.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'scripts/deployment/update_kg_deployment.py' is missing the required module header pattern"
      },
      {
        "file": "scripts/deployment/update_kg_root.py",
        "type": "code_pattern",
        "element_type": "module",
        "pattern_name": "module_header",
        "message": "Module 'scripts/deployment/update_kg_root.py' is missing the required module header pattern"
      }
    ]
  },
  "shell_analysis": {
    "files": {
      "verify_stack_health.sh": {
        "path": "verify_stack_health.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "restore_from_backup.sh": {
        "path": "restore_from_backup.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "CURRENT_BRANCH"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "install-file-update-hooks.sh": {
        "path": "install-file-update-hooks.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "mcp.sh": {
        "path": "mcp.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "BASE_DIR"
          },
          {
            "name": "GREEN"
          },
          {
            "name": "YELLOW"
          },
          {
            "name": "RED"
          },
          {
            "name": "NC"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": true
      },
      "fix_code_quality.sh": {
        "path": "fix_code_quality.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "GREEN"
          },
          {
            "name": "YELLOW"
          },
          {
            "name": "RED"
          },
          {
            "name": "NC"
          },
          {
            "name": "PYTHON_FILES"
          },
          {
            "name": "SHELL_FILES"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "create_backup_branch.sh": {
        "path": "create_backup_branch.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "CURRENT_BRANCH"
          },
          {
            "name": "TIMESTAMP"
          },
          {
            "name": "BACKUP_BRANCH"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "install_pre_commit_hooks.sh": {
        "path": "install_pre_commit_hooks.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "GREEN"
          },
          {
            "name": "YELLOW"
          },
          {
            "name": "RED"
          },
          {
            "name": "NC"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": true
      },
      "check_code_quality.sh": {
        "path": "check_code_quality.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [
          {
            "name": "GREEN"
          },
          {
            "name": "YELLOW"
          },
          {
            "name": "RED"
          },
          {
            "name": "NC"
          },
          {
            "name": "FAILURES"
          },
          {
            "name": "PYTHON_FILES"
          },
          {
            "name": "SHELL_FILES"
          }
        ],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "core/kg/scripts/install_hooks.sh": {
        "path": "core/kg/scripts/install_hooks.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/maintenance/test_mcp_agent.sh": {
        "path": "scripts/maintenance/test_mcp_agent.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/maintenance/verify_stack_health.sh": {
        "path": "scripts/maintenance/verify_stack_health.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/maintenance/verify_librechat_integration.sh": {
        "path": "scripts/maintenance/verify_librechat_integration.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/deployment/start_mcp_server.sh": {
        "path": "scripts/deployment/start_mcp_server.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/deployment/restart_stack.sh": {
        "path": "scripts/deployment/restart_stack.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/deployment/register_new_features.sh": {
        "path": "scripts/deployment/register_new_features.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      },
      "scripts/deployment/update_ollama_references.sh": {
        "path": "scripts/deployment/update_ollama_references.sh",
        "shebang": "/bin/bash",
        "description": null,
        "functions": [],
        "variables": [],
        "environment_variables": [],
        "has_script_header": false,
        "has_error_handling": false,
        "has_command_checking": false
      }
    },
    "issues": [
      {
        "file": "verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'verify_stack_health.sh' is missing the required script header pattern"
      },
      {
        "file": "verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'verify_stack_health.sh' is missing the required error handling pattern"
      },
      {
        "file": "verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'verify_stack_health.sh' is missing the required command checking pattern"
      },
      {
        "file": "restore_from_backup.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'restore_from_backup.sh' is missing the required script header pattern"
      },
      {
        "file": "restore_from_backup.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'restore_from_backup.sh' is missing the required error handling pattern"
      },
      {
        "file": "restore_from_backup.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'restore_from_backup.sh' is missing the required command checking pattern"
      },
      {
        "file": "install-file-update-hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'install-file-update-hooks.sh' is missing the required script header pattern"
      },
      {
        "file": "install-file-update-hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'install-file-update-hooks.sh' is missing the required error handling pattern"
      },
      {
        "file": "install-file-update-hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'install-file-update-hooks.sh' is missing the required command checking pattern"
      },
      {
        "file": "mcp.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'mcp.sh' is missing the required script header pattern"
      },
      {
        "file": "mcp.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'mcp.sh' is missing the required error handling pattern"
      },
      {
        "file": "fix_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'fix_code_quality.sh' is missing the required script header pattern"
      },
      {
        "file": "fix_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'fix_code_quality.sh' is missing the required error handling pattern"
      },
      {
        "file": "fix_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'fix_code_quality.sh' is missing the required command checking pattern"
      },
      {
        "file": "create_backup_branch.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'create_backup_branch.sh' is missing the required script header pattern"
      },
      {
        "file": "create_backup_branch.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'create_backup_branch.sh' is missing the required error handling pattern"
      },
      {
        "file": "create_backup_branch.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'create_backup_branch.sh' is missing the required command checking pattern"
      },
      {
        "file": "install_pre_commit_hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'install_pre_commit_hooks.sh' is missing the required script header pattern"
      },
      {
        "file": "install_pre_commit_hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'install_pre_commit_hooks.sh' is missing the required error handling pattern"
      },
      {
        "file": "check_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'check_code_quality.sh' is missing the required script header pattern"
      },
      {
        "file": "check_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'check_code_quality.sh' is missing the required error handling pattern"
      },
      {
        "file": "check_code_quality.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'check_code_quality.sh' is missing the required command checking pattern"
      },
      {
        "file": "core/kg/scripts/install_hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'core/kg/scripts/install_hooks.sh' is missing the required script header pattern"
      },
      {
        "file": "core/kg/scripts/install_hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'core/kg/scripts/install_hooks.sh' is missing the required error handling pattern"
      },
      {
        "file": "core/kg/scripts/install_hooks.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'core/kg/scripts/install_hooks.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/maintenance/test_mcp_agent.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/maintenance/test_mcp_agent.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/maintenance/test_mcp_agent.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/maintenance/test_mcp_agent.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/maintenance/test_mcp_agent.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/maintenance/test_mcp_agent.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/maintenance/verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/maintenance/verify_stack_health.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/maintenance/verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/maintenance/verify_stack_health.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/maintenance/verify_stack_health.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/maintenance/verify_stack_health.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/maintenance/verify_librechat_integration.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/maintenance/verify_librechat_integration.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/maintenance/verify_librechat_integration.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/maintenance/verify_librechat_integration.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/maintenance/verify_librechat_integration.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/maintenance/verify_librechat_integration.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/deployment/start_mcp_server.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/deployment/start_mcp_server.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/deployment/start_mcp_server.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/deployment/start_mcp_server.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/deployment/start_mcp_server.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/deployment/start_mcp_server.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/deployment/restart_stack.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/deployment/restart_stack.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/deployment/restart_stack.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/deployment/restart_stack.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/deployment/restart_stack.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/deployment/restart_stack.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/deployment/register_new_features.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/deployment/register_new_features.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/deployment/register_new_features.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/deployment/register_new_features.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/deployment/register_new_features.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/deployment/register_new_features.sh' is missing the required command checking pattern"
      },
      {
        "file": "scripts/deployment/update_ollama_references.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "script_header",
        "message": "Shell script 'scripts/deployment/update_ollama_references.sh' is missing the required script header pattern"
      },
      {
        "file": "scripts/deployment/update_ollama_references.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "error_handling",
        "message": "Shell script 'scripts/deployment/update_ollama_references.sh' is missing the required error handling pattern"
      },
      {
        "file": "scripts/deployment/update_ollama_references.sh",
        "type": "code_pattern",
        "element_type": "script",
        "pattern_name": "command_checking",
        "message": "Shell script 'scripts/deployment/update_ollama_references.sh' is missing the required command checking pattern"
      }
    ]
  },
  "other_analysis": {
    "files": {},
    "issues": []
  }
}